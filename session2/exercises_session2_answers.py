from helper_functions import generate_password, encrypt_string
from typing import TypeVar


def food_to_price(food_list: list) -> str:
    """
    We want to create a dictionary of with food items and the price of the food.
    The first item in the list is worth 1 kr. All other items are worth the previous
    list item's price * 1.1.

    Return a dictionary will the following format:
    {<food item>: <price>, <food item>: <price>, ...}

    Examples
    ---------
    1)
    function_input:
        food_list = ["apple", "meat", "bread", "grillkrydda"]

    function_output:
        {"apple": 1, "meat": 1.1, "bread": 1.21, "grillkrydda": 1.33}
    """
    food_to_price_dict = {}
    price = 1
    for food in food_list:
        food_to_price_dict[food] = price
        price *= 1.1

    return food_to_price_dict


def csv_to_dict(csv_string: str) -> dict:
    """
    We have a csv string (comma separated value) with multiple
    lines of usernames and services. A line has the following format:

    <username>;<usage>

    We want to create a password for each username and also map each username
    to a password. This can be accoplished by using a dictionary which will
    be the return value of the function. In other words the dictionary
    should look like:

    {<username>: <generated password>, <username>: <generated password>, ...}

    a randomly generated password can be generated by the function generate_password().
    This function can be found in the helper_functions module (Needs to be imported).
    We do not care about the <usage> string in the csv file.

    Examples
    ---------
    1)
    function_input:
        csv_string = "clip_master;YouTube\n
                      tweet_legend;Twitter\n
                      aim_god;Steam

    function_output:
        {clip_master: 6ubmia6exsf, tweet_legend: hk2l5kmi30slqdpjreb, aim_god: iph7t5clt03i8uo}

    HINT:
        The .split() method for strings is useful when getting all substrings separated by a character (like \n, or ;)
        "hello_world".split("_") will return ["hello", "world"] as an example. See help("".split) for more details.
    """
    user_2_pass = {}
    for line in csv_string.split():
        user_2_pass[line.split(";")[0]] = generate_password()

    return user_2_pass


DIGITS = ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")

# This is a type defined as the PasswordData class
# Only used for static typing and readability
TPasswordData = TypeVar("TPasswordData", bound="PasswordData")


class PasswordData:

    """
    Implement an init method for the PasswordData class.
    This class should take 2 arguments:
        username (str)
        password (str)

    In other words, a class instance will be created by PasswordData(username, password)

    It should have three attributes:
        username            --  Same as argument
        password            --  Same as argument
        encrypted_password  --  This attribute should be an encryption of the
                                password argument. The password can be encrypted
                                using the encrypt_string() function found in the
                                helper_functions module (import required)

    """

    def __init__(self, username: str, password: str):
        self.username = username
        self.password = password
        self.encrypted_password = encrypt_string(password)

    def change_password(self, password):
        self.password = password
        self.__encrypted_password = encrypt_string(password)

    def remove_username_digits(self) -> None:
        """
        Remove any digits in the usename attribute.
        All digits can be found in the constant DIGITS

        Examples
        --------
        1)
        before method:
            username = "this_is_a_pasword123"

        after method:
            username = "this_is_a_password"

        2)
        before method:
            username = "d1i2g3i4t5s21"

        after methods:
            username = "digits"

        Hint:
            the string method replace() might be of use.
        """
        for number in DIGITS:
            self.username = self.username.replace(number, "")

    def __eq__(self, other: TPasswordData) -> bool:
        """
        Implement == operator for objects of PasswordData.
        This "magic" method should check whether the username and password
        of the current instance and another instance are equal.
        Return a boolean
        """
        return self.username == other.username and self.password == other.password

    def __repr__(self) -> str:
        return f"PasswordData(username={self.username}, password={self.password})"


class TimePasswordData(PasswordData):
    def __init__(self):
        super().__init__()


if __name__ == "__main__":
    # print(food_to_price(["apple", "meat", "bread", "grillkrydda"]))
    # print(csv_to_dict("clip_master;YouTube\ntweet_legend;Twitter\naim_god;Steam"))
    pd = PasswordData("amaz123ing11", "1234")
    pd2 = PasswordData("amazing", "1234")
    pd.remove_username_digits()
